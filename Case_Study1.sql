create database CaseStudy;
use CaseStudy;

select * from Fact_CS1;
select * from Location_CS1;
select * from Product_CS1;

--1) How many states are there where products have been sold ?
select count(distinct State) from Location_CS1;

--2) How many products are of regular type ?
select count(Product) from Product_CS1 where Type = 'Regular'; 
w
--3) How much spending has been done on marketing of product id 1
select sum(convert(int,Marketing)) Marketing_Pd1 from Fact_CS1 where ProductId = 1;

--4) What is the minimum sales of a product ?
select min(convert(int, Sales)) Min_Sales from Fact_CS1;

--5) Display max Cost of Good Sold(COGS).
select max(convert(int,COGS)) MCOGS from Fact_CS1;

--6) Display the Details of the productid where product type is coffee
 
select f.*, p.*
from Fact_CS1 f
inner join Product_CS1 p
on f.ProductId = p.ProductId
where Product_Type = 'Coffee';

--7) Display the details where total_expenses is greater than 40.
select * from Fact_CS1 where Total_Expenses > 40;

--8) What is the average sales in Area_Code 719 ?
select avg(convert(int, Sales)) Avg_Sales from Fact_CS1 where Area_Code = 719;

--9) Find out the total profit generated by Colorado state.
select sum(convert(int, f.Profit)) Total_Profit_C from Fact_CS1 f
inner join Location_CS1 l on f.Area_Code = l.Area_Code
where State = 'Colorado';

--10) Display the average inventory for each product id.
select ProductId,avg(convert(int, Inventory)) Avg_Inventory from Fact_CS1 group by ProductId
order by convert(int, ProductId) asc;

--11) Display state in a sequential order in a location table.
select distinct State from Location_CS1 order by State asc;

--12) Display the average budget margin of the store where average budget margin should be
--greater than 100.
select avg(convert(int, Budget_Margin)) Avg_BM from Fact_CS1 where Budget_Margin > 100;

--13) What is the total sales done on date 2010-01-01
select sum(convert(int, Sales)) Total_Sales from Fact_CS1
where convert(date,Date) = '01-01-2010';

--14) Display the average total expense of each product id on individual date
select Date, avg(convert(int, Total_Expenses)) Avg_TE from Fact_CS1 group by Date
order by day(convert(date,Date)) asc;

--15) Display the table with the following attributes such as
--Date, productid, product_type, product, Sales, profit, state, area_code
select f.Date, f.ProductId, p.Product_Type, p.Product, f.Sales, f.Profit, l.State, l.Area_Code
from Fact_CS1 f, Location_CS1 l, Product_CS1 p
where f.Area_Code = l.Area_Code and p.ProductId = f.ProductId;

--16) Display the rank without any gap to show the Sales wise rank.
select Sales, dense_rank() over (order by Sales) as Sales_DR from Fact_CS1;
select Sales, rank() over (order by Sales) as Sales_DR from Fact_CS1;
select Sales from Fact_CS1 order by Sales desc;
--17) Find the State wise Profit and Sales.
select l.State,f.Profit, f.Sales from Location_CS1 l, Fact_CS1 f
where f.Area_Code = l.Area_Code 
group by l.State, f.Profit,f.Sales;

--18) Find the State wise Profit and Sales along with the Product Name.
select l.State, p.Product, f.Profit, f.Sales from Fact_CS1 f, Location_CS1 l, Product_CS1 p
where f.Area_Code = l.Area_Code and p.ProductId = f.ProductId
group by l.State,p.Product, f.Profit, f.Sales;

--19) If there is an increase in sales of 5%. Calculate the increased sales.
select Sales, (1.05*convert(int,Sales)) Increased_Sales from Fact_CS1;

--20) Find the maximum profit along with the Product id and Product Type.
select p.ProductId, p.Product_Type, max(convert(int, f.Profit)) from Product_CS1 p, Fact_CS1 f
where p.ProductId = f.ProductId
group by p.ProductId, p.Product_Type, f.Profit;

--21) Create a Stored Procedure to fetch the result according to the product type from Product.
/*A stored procedure is a prepared SQL code that you can save, so the code can be reused over and over again.*/
create procedure PT_from_P
as
select Product_Type from Product_CS1
go;

exec  PT_from_P;


--22) Write a query by creating a condition in which if the total expenses is less than 60 then it is a
--profit or else loss. /*We have to use CASE WHEN*/
select Total_Expenses,
case when Total_Expenses < 60 then 'Profit'
else 'Loss'
end as P_or_L
from Fact_CS1;

--23) Give the total weekly sales value with the Date and productid details. Use roll-up to pull the
--data in hierarchical order.
select Date, ProductId, sum(convert(int, Sales)) as Total_weekly_Sales from Fact_CS1
where Date between dateadd(d, -7, convert(date, Date)) and convert(date, Date)
group by rollup(Date,ProductId);/*Rethink*/

--24) Apply union and intersection operator on the tables which consist of attribute area code.
select Area_Code from Fact_CS1
where Area_Code in (select Area_Code from Location_CS1)
union
select Area_Code from Location_CS1
where Area_Code in (select Area_Code from Fact_CS1)
order by Area_Code;

select Area_Code from Fact_CS1
where Area_Code in (select Area_Code from Location_CS1)
intersect
select Area_Code from Location_CS1
where Area_Code in (select Area_Code from Fact_CS1)
order by Area_Code;
go

--25) Create a user-defined function for the product table to fetch a particular product type based
--upon the user’s preference.
create function FindProdType(@ProductId varchar(50), @Product varchar(50), @PType varchar(50))
returns table
as
return select * from [dbo].[Product_CS1] where ProductId = @ProductId and Product = @Product
and PType = @PType

select * from [dbo].[FindProdType]('1', 'Amaretto', 'Regular');

select * from Product_CS1;

--26) Change the product type from coffee to tea where product id is 1 and undo it.
update Product_CS1
set Product_Type = 'Tea'
where convert(int,ProductId) = 1;

select * from Product_CS1;

update Product_CS1
set Product_Type = 'Coffee'
where convert(int,ProductId) = 1;

--27) Display the Date, productid and sales where total expenses are between 100 to 200.
select Date, ProductId, Sales from Fact_CS1 where Total_Expenses between 100 and 200;

--28) Delete the records in the product table for regular type.
select * from Product_CS1 where PType = 'Regular';

--29) Display the ASCII value of the fifth character from the column product.
select Product, substring((Product),5,1) Fifth_Character, ASCII(substring((Product),5,1)) ASCII_Value 
from Product_CS1;